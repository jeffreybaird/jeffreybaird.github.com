<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learn With Jeff]]></title>
  <link href="http://jeffreybaird.github.com/atom.xml" rel="self"/>
  <link href="http://jeffreybaird.github.com/"/>
  <updated>2012-08-26T13:50:35-04:00</updated>
  <id>http://jeffreybaird.github.com/</id>
  <author>
    <name><![CDATA[Jeff Baird]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Get a Job as a Developer in Less Than Six Months]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/08/21/how-to-get-a-job-as-a-developer-in-less-than-six-months/"/>
    <updated>2012-08-21T00:00:00-04:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/08/21/how-to-get-a-job-as-a-developer-in-less-than-six-months</id>
    <content type="html"><![CDATA[<p>So the month of June came and went, and so did July. A lot has happened, but I wasn&#8217;t able to <a href="http://www.learnwithjeff.com/2012/05/31/goals-for-the-month-of-june/">complete my goals</a></p>

<p>I did, however, make huge strides in my programming skills &#8211; so huge, in fact, that I was hired as a junior developer at <a href="http://medivo.com">Medivo</a>!</p>

<p>This post is about how I got hired for my dream job with less then six months of programming experience.</p>

<h2>Learning to Program</h2>

<p><strong>Work your ass off:</strong></p>

<p>This isn&#8217;t how to fake your way into a position. It is how I got real results in a short amount of time.</p>

<p>I was, however, in a unique position. I didn&#8217;t have a job, I was only taking one class and I had fallen in love with programming.</p>

<p>So, in order to make the kind of strides I made, expect to spend at least 10 hours a day, six days a week dedicated to programming activities.</p>

<p><strong>Read a shit ton:</strong></p>

<p><a href="http://pragprog.com/">The Pragmatic Programmers</a> is now your best friend. If you are learning Ruby, get the <a href="http://pragprog.com/book/ruby3/programming-ruby-1-9">Ruby 1.9 manual</a>, <a href="http://pragprog.com/book/ltp2/learn-to-program">Learn to Program</a>, and get their <a href="http://pragmaticstudio.com/">Pragmatic studios</a> learning ruby course (It is $200 but worth every cent). Start with the Pragmatic studios video course, and after about five lessons, start step two of my process while continuing to work on the videos.</p>

<p><strong>Join your local ruby group:</strong></p>

<p>This is a must. If you ignore everything else I say, still join your local meetup group.</p>

<p>This is imperative for three main reasons: First, the people you meet may become your employers, or they might introduce you to your future employers. Second, you will be around the people that have the jobs you want. Listen to them, jot down notes about the things they say, and if you don&#8217;t understand, then go research it. Last, if you show passion, you will likely find enthusiastic mentors from this group of people. I would not have made it as far as I have without <a href="http://www.twitter.com/gstark">Gavin Stark</a>, <a href="http://blog.migrantstudios.com/">Aubrey Goodman</a> and the rest of the Tampa ruby brigade.</p>

<p><strong>Write a ton of code:</strong></p>

<p><a href="http://www.codeschool.com/courses/try-git">Learn git</a> and get a <a href="https://github.com/">GitHub</a> account. Push code to github EVERYDAY. There is no exception to this rule.</p>

<p>There are no shortcuts, you must write code, and a lot of it. It doesn&#8217;t have to be good code, but you must write it. If you look at it and think, &#8220;boy, this is shitty,&#8221; document the code and explain what you were thinking.</p>

<p><strong>Make everything public:</strong></p>

<p>This is an important aspect of writing a ton of code. If you keep it to yourself, it can be as shitty as you want. I find that if its public, every line of code has to be defendable, even if your reasoning is flawed. It is easier to adjust how you do things if you know why you did it in the first place.</p>

<p>Get a GitHub account, learn git like a boss, make every repo public.</p>

<p><strong>Blog about your challenges:</strong></p>

<p>You will face challenges just like everyone else. Blog about them incessantly. You can&#8217;t get any better unless you are asking for help. Also, having a record of your progress will come into handy later when you are trying to get that job.</p>

<p>Make sure you also blog about your successes. When you get something right, especially early on, it feels like the most epic of wins. Tell everyone about how awesome it feels and how you did it.</p>

<h2>Getting The Job</h2>

<p>So now you know a little programming. Don&#8217;t wait to get to a point where you feel skilled enough to get a job, because you will be waiting a long time. There is a desperate need for developers, and you are doing a great disservice to yourself and to the community. By learning on the job, you will give yourself a much more focused learning environment. However, here are a few things that will make the search go a little smoother.</p>

<p><strong>Learn to speak like a programmer:</strong></p>

<p>You&#8217;ll get a little of this from your reading and from your meetup groups, but there is more you can do. First, listen to related podcasts, I recommend every episode of <a href="http://rubyrogues.com/">Ruby Rogues</a>, next subscribe to <a href="http://railscasts.com/">Rails Casts</a> and <a href="https://www.destroyallsoftware.com/screencasts">Destroy all Software</a> two great programming screen casts.</p>

<p>Some of what is discussed will go right over your head. That is okay. The point of this is to learn how developers speak. When you interview this will be an important skill.</p>

<p><strong>Cast a wide net:</strong></p>

<p>I got my job by sending out this email to the NYC Ruby community:</p>

<blockquote><p>Hey NYC.rb!</p>

<p>I am a (relatively new) self-taught programmer moving to NYC from Tampa, FL at the end of July. Tampa&#8217;s awesome Ruby community inspired me to learn Ruby as my first language, and I&#8217;m excited to get involved with the New York City Ruby community.</p>

<p>I am graduating in a few weeks with a degree in business and entrepreneurship from the University of South Florida but found my passion, programming, while I was hiring a developer for one of my businesses.</p>

<p>I am looking for an internship/apprenticeship/junior programming position open in the area. If anyone has or knows of such a position, I would love to meet in June when I am in town for GoRuCo.</p>

<p>I am getting fairly proficient with Ruby, know the basics of JavaScript, HTML and CSS and am currently
working with Rails. I learn quickly and work hard.</p>

<p>You can see where I am with my skills on <a href="https://github.com/jeffreybaird">GitHub</a>, and I blog about my learning at learnwithjeff.com. Any feedback or advice is greatly appreciated!</p>

<p>I look forward to meeting some of you and getting involved with the New York City Ruby Community.</p>

<p>Sincerely,
Jeff</p></blockquote>

<p>I got 40+ responses in 18 hours. I also found every NYC ruby shop I could and read about them.</p>

<p>Next, I made a list of my top 10 companies and I worked my ass off to get interviews with all of them. I also stayed open to a few more pending discussions with the people on the team.</p>

<p><strong>Don&#8217;t underestimate your value:</strong></p>

<p>When I started this search I thought I would be scrubbing toilets in exchange for nightly code reviews. While that determination was probably a good thing, the market is currently in favor of devs looking for work. You may be a n00b, but don&#8217;t underestimate your value.</p>

<p><strong>So to sum up:</strong></p>

<p>Work hard, write a lot of code, be transparent and be enthusiastic.</p>

<p>In February 2012 I had never written a line of code. But, as of July 11, 2012 I am employed as a full-time Ruby Developer. You can do it too :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goals for the month of June.]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/05/31/goals-for-the-month-of-june/"/>
    <updated>2012-05-31T00:00:00-04:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/05/31/goals-for-the-month-of-june</id>
    <content type="html"><![CDATA[In my learning, I find it immensely helpful to set lofty (but possible and measurable) goals. I didn&#8217;t my goal for the month of May but it was pretty straight-forward, publish a gem. I accomplished that goal, twice.

I&#8217;ve decided to talk about my goals out for the month of June since they are much more challenging than my goals for May. First, I want to publish a &#8220;useful&#8221; gem/plugin/program/app. Second, I want to make some contribution to an open source project.

Both of these are a little subjective, so let me define further. I define &#8220;useful&#8221; as someone other than myself <span style="text-decoration: underline;">uses</span> it. Not just downloads it, actually uses my creation. Now, since I can&#8217;t control whether or not my contribution to an open source project is accepted, I will be a little more loose in that definition. I want to issue a meaningful pull request on a public repo that has multiple contributors.

I realize that the above are huge challenges for a beginning programmer, but I wouldn&#8217;t get anywhere if I only tried to do comfortable things :)

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing - a n00b's reflection]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/05/29/testing-a-n00bs-reflection/"/>
    <updated>2012-05-29T00:00:00-04:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/05/29/testing-a-n00bs-reflection</id>
    <content type="html"><![CDATA[<p>I have officially spent more time testing and refactoring my code for my black jack game, <a href="https://github.com/jeffreybaird/RubyJack">RubyJack</a>, than I have on the original code base and it has taught me a big lesson: TEST FIRST.</p>

<p>This is a topic that I don&#8217;t have the breadth of knowledge to really attack. Jeff Atwood does a much better job than I, <a href="http://www.codinghorror.com/blog/2006/07/i-pity-the-fool-who-doesnt-write-unit-tests.html">here</a>. I do, however, feel that I can add the perspective of a new programmer.</p>

<p>The challenge of testing first as a n00b, is that when you are learning to program, you generally learn</p>

<pre><code>    def print_hello_world


      puts "hello world"

    end

    print_hello_world
</code></pre>

<p>before you learn</p>

<pre><code>    it  "prints hello word" do

      print_hello_world.should == "hello world"

    end
</code></pre>

<p>I wouldn&#8217;t say this is a mistake since testing is inherently more complicated, but it does create a significant barrier to entry to the new programmer. This barrier is mainly a comfort level thing.</p>

<p>When I was first learning about testing, I thought &#8220;I can really see the theoretical application of this, but my programs are so simple now that I don&#8217;t need tests.&#8221;</p>

<p>BIG F&amp;<sup>%$ING</sup> MISTAKE.</p>

<p>The big example, in <a href="https://github.com/jeffreybaird/RubyJack">RubyJack</a>, of where writing my tests first would have helped me, was during the refactoring process. The first draft of my code may not have been bad for a new programmer, but was(is) poorly written software on a whole. There were methods in classes where they didn&#8217;t make sense, arrays of strings where they should have been arrays of objects, 25 line methods that did one simple task and many, many other problems.</p>

<p>Up to this point my tests consisted on running the program through my command line, playing the game till it broke and reading the error message. Not super efficient.</p>

<p>So, after I published the first version of the gem (gem install RubyJack) I started to move stuff around. First, I did some simple refactoring of individual methods, no problems. Then I thought &#8220;oh, well this method that starts the game probably should be in the &#8216;Game class&#8217; and not the &#8216;Player class.&#8217;&#8221;</p>

<p>All Hell Broke Loose.</p>

<p>Nothing worked anymore, I couldn&#8217;t even start the game let alone deal a card or initialize a deck.</p>

<p>Thank god for &#8220;git reset &#8211;hard&#8221;.</p>

<p>I was able to hop back to my latest commit and start again (more about using commits to your advantage later). Then, I wrote some tests. It was hard;  it hurt my head; I didn&#8217;t like it.</p>

<p>I struggled through them and got (most of) them to pass. Around this time I brought in some professional help, Gavin. Gavin was nice enough to sit with me and help me do a little (a lot) of refactoring of my code. We moved some methods into classes where they made more sense, and created classes that should have been there from the beginning.</p>

<p>Then I tried to do some more refactoring on my own, which led to even more problems. I hadn&#8217;t learned my lesson.</p>

<p>Once again, I found myself reaching for &#8220;git reset&#8221;</p>

<p>It was then that I resolved to write better tests. I re-watched the pragmatic studios video on unit testing and peppered Gavin with some more questions. Then, I wrote a bunch of tests and MADE THEM ALL PASS.</p>

<p>When I originally wrote my tests, if I couldn&#8217;t get a test of a certain functionality to pass, I marked it as &#8220;pending&#8221; instead of figuring out the problem. Not this time. It took me hours, and until 2am, but I made them all pass.</p>

<p>I then entered the process to which Gavin introduced me to:</p>

<p>Red</p>

<p>Green</p>

<p>Refactor</p>

<p>What that translates to is this:</p>

<p>Check my tests, if they pass I make one small change. I then check my tests again, some of them may be failing, I want to make sure they are the ones I expect. Then, I continue tweaking the code till I get it to pass all the tests again (sometimes tweaking the tests too).</p>

<p>Then I start the process all over again with my next change.</p>

<p>The benefit to testing first, as I see it, is as it concerns the thought process towards your code. As <a href="http://blog.jtimothyking.com/2006/07/11/twelve-benefits-of-writing-unit-tests-first">J. Timothy King</a> States:</p>

<blockquote><p>You ask, “What code will I write to generate a solution?” But that’s backward. The first thing you should be doing&#8230; The first thing you ask is <em>not</em>“What code will I write?” The first thing you ask is “How will I know that I’ve solved the problem?”</p></blockquote>

<p>So, my tip for other n00bs out there is to learn to test sooner rather than later. You won&#8217;t regret it.</p>

<h3>Thank You!</h3>

<p>I want to give a huge public thank you to <a href="http://www.twitter.com/gstark">Gavin Stark</a> for helping me with the refactoring process and answering all my crazy n00b questions. Thanks Gavin! Also, thanks to <a href="blog.migrantstudios.com">Aubrey Goodman</a> who graciously takes my questions at all hours. Finally, I&#8217;d like to say thanks to <a href="http://alindeman.github.com/">Andy Lindeman</a> who went through and commented on my code on github! It is people like you guys that make the Ruby community awesome and make me glad to be a part of it.</p>

<h3>Disclaimer, links, and tweets</h3>

<p>I love to learn and I do not pretend to be an expert on the topics I post about. If I&#8217;m wrong please, let me know in the comments, I love feedback and you won&#8217;t offend me. Follow me on <a href="http://www.twitter.com/jeffrey_baird">Twitter</a>; I love to discuss Ruby, books and anything interesting.</p>

<p>If you want to help an aspiring Rubyist, I&#8217;m on <a href="http://github.com/jeffreybaird">GitHub</a> and would love any feedback you have to offer.</p>

<p>Many people have helped me learn, I would love to return the favor! <a href="http://jeffreyleebaird.com">Get in touch</a> and I&#8217;ll see if I can help.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyJack my second Ruby Gem!]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/05/24/rubyjack-my-second-ruby-gem/"/>
    <updated>2012-05-24T00:00:00-04:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/05/24/rubyjack-my-second-ruby-gem</id>
    <content type="html"><![CDATA[<p>For the last two days I have been slaving over my second attempt at a real ruby program, this one with no help from my friends over at pragmatic programming. I am going to briefly go over something I learned doing this, some of the problems I faced and some of the features I am still working on.</p>

<p>If you want to find the project I am working on, the source code can be found <a href="https://github.com/jeffreybaird/RubyJack/tree/master/black_jack">here</a> on my GitHub profile.</p>

<p>You can install the gem with $gem install RubyJack</p>

<h2>TIL:</h2>

<p>Today I learned a little bit about ruby&#8217;s regular expressions. I  know there is a lot more that I don&#8217;t know about them, but from what I can tell, they are powerful. The most basic definition I could find of a regular expression is from the Programming Ruby 1.9 book (the latest PickAxe addition):</p>

<blockquote><p>A regular expression is a pattern that can be matched against a string. It can be a simple pattern, such as <em>the string must contain the sequence of letters &#8220;cat&#8221;,</em> or the pattern can be complex, such as <em>the string must start with a protocol identifier, followed by two literal forward slashes, followed by&#8230;,</em> and so on. This is cool in theory. But what makes reqular expressions so powerful is what you can do with them in practice:</p>

<p>-You can test a string to see whether it matches a pattern
-You can extract from a string the sections that match all or part of a pattern.
-You can change the string, replacing parts that match a pattern</p></blockquote>

<p>The job I needed regular expressions for in my code is most likely based in the poor design of my deck of cards. The following is the code that initialized a new deck:</p>

<pre><code>def create_a_deck
  new_suits = %w(hearts spades clubs diamonds )
  new_value = %w(Ace 2 3 4 5 6 7 8 9 10 Jack Queen King)
  @new_deck = Array.new
  #creates a new array by combining the information in the
  #above two
  new_value.each do |card|
    new_suits.each do |suited|
      @new_deck &amp;lt;&amp;lt; &amp;quot;#{card} of #{suited}&amp;quot;
    end
  end
end
</code></pre>

<p>What I am doing above is creating an array of strings that have combined the strings found in the &#8220;new_suits&#8221; array and the &#8220;new_value&#8221; array above to make a new array that includes an entire deck. The iterator starts with &#8220;Ace&#8221; and combines it with &#8220;hearts&#8221; to make &#8220;Ace of hearts&#8221; which is then added on to the end of the @new_deck array. The iterator goes through and makes 52 cards in this fashion.</p>

<p>The problem with this method of making a deck is that all of my cards are now Strings and I need a way to covert them into point values for the Black Jack game. I did some research and came upon regular expressions.</p>

<p>Here is the method I used to parse the deck and assign values:</p>

<pre><code>def card_value card
  if card =~ /Queen/
    10
  elsif card =~ /King/
    10
  elsif card =~ /Jack/
    10
  elsif card =~ /Ace/
    11
  elsif card =~ /2/
    2
  elsif card =~ /3/
    3
  elsif card =~ /4/
    4
  elsif card =~ /5/
    5
  elsif card =~ /6/
    6
  elsif card =~ /7/
    7
  elsif card =~ /8/
    8
  elsif card =~ /9/
    9
  elsif card =~ /10/
    10
  else
    0
  end
end
</code></pre>

<p>I have a gut feeling that any rubyists that are reading this, died a little bit inside with that method. However, it got the job done and it taught me a little about regular expressions. Essentially what this method does is search the string I give it (I&#8217;m using this with an iterator and passing it each card in the player&#8217;s hand) and assigning a value based on what it finds. I will probably add another method to this in order to expand upon the Ace, but more on that later.</p>

<h2>Problems I faced:</h2>

<p>So there are a couple parts to blackjack that were a little tough for me to get in the program. They are, dealer play, the option of playing an Ace as a 1 or 11, and the ability to bet.  I am not going to attack the betting capability just yet but I do think I will discuss dealer play and  Ace action.</p>

<h3>Dealer Play:</h3>

<p>On the surface, this problem seemed pretty simple. The dealer is just a special player. So, create a subclass of player and write some methods that automate the play of the dealer (I won&#8217;t paste all that code here, go look at the source!). However, every time I called a method from the dealer class my program crashed. I have to keep fiddling with that to see if I can get it to work.</p>

<h3>Ace Action:</h3>

<p>I actually think I solved this problem while I was writing this blog post (which is why I write this blog). I think if I add call a method in when the card_value method finds &#8220;Ace&#8221; that prompts the user to make a choice, it will solve the problem. The tricky part will be offering that choice repeatedly (so if the user changes his mind later in the hand) and automating it for the dealer.</p>

<h2>Features to come:</h2>

<p>So you can probably gather that I plan on adding the above two features today. Another feature that I want to add is the ability of the user to place bets, have holdings and play multiple games.</p>

<p>Please go play the game ($gem install RubyJack) and give me some feedback! Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I/O...FINALLY!]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/05/21/io-finally/"/>
    <updated>2012-05-21T00:00:00-04:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/05/21/io-finally</id>
    <content type="html"><![CDATA[<p>When I was learning to play the piano, I remember wanting to jump right into Billy Joel. &#8220;Hot Cross Buns&#8221; and &#8220;Mary Had a Little Lamb&#8221; were boring and very uncool for an eight year old boy to be learning.</p>

<p>I have had the same feeling while learning to code. I spent a lot of time doing methods, objects and classes never really getting to use them as I would in the real world.</p>

<p>There is one question I wanted to be able answer since the day I started programming: &#8220;How the hell do I interact with a program?&#8221;</p>

<p>Today, I figured that out.  The code below is from the main program file for the game I created in the <a href="http://online.pragmaticstudio.com/courses/ruby">Pragmatic Studios course</a>. In it, there are two examples of some of ruby&#8217;s basic input functions.</p>

<pre><code>knuckleheads = StudioGame::Game.new(&amp;quot;Knuckleheads&amp;quot;)

default_player_file = File.join(File.dirname(__FILE__), 'players.csv')
knuckleheads.load_players(ARGV.shift || default_player_file)

loop do
  puts &amp;quot;\nHow many game rounds do you want to play?&amp;quot;
  answer = gets.downcase.chomp
  case answer
  when /^\d+$/
    knuckleheads.play(answer.to_i)
  when 'quit','exit'
    knuckleheads.print_stats
    break
  else
    puts &amp;quot;Please enter a number or 'quit'&amp;quot;
  end
end

knuckleheads.save_high_scores
</code></pre>

<p>The first input I learned was the &#8220;gets&#8221; method. Here, the program prompts the user to provide a number, the code checks that it is in fact a number (or a quit command) and then uses the number as an argument for the method.</p>

<pre><code>loop do
  puts &amp;quot;\nHow many game rounds do you want to play?&amp;quot;
  answer = gets.downcase.chomp
  case answer
  when /^\d+$/
    knuckleheads.play(answer.to_i)
  when 'quit','exit'
    knuckleheads.print_stats
    break
  else
    puts &amp;quot;Please enter a number or 'quit'&amp;quot;
  end
</code></pre>

<p>The next one is a little more complicated so I will try to break it up into pieces.</p>

<p>What I am trying to accomplish is to allow non-programmers to add players to my game using a csv file and no code. They should be able to simply input the name of a player and the program automatically adds a Player object to the game.</p>

<p>To do this I created a player.csv file (in the above code a person could theoretically create their own file and load it in) with a series of players each on their own line. Then I included the following code in my Game class:</p>

<pre><code>  def load_players (filename=&amp;quot;players.csv&amp;quot;)
    CSV.foreach(filename) do |line|
      player = Player.new(line[0], line[1].to_i)
      add_player(player)
    end
  end
</code></pre>

<p>This takes a file (defaulted with my players.csv) and goes through each line of the file, creating a Player object for each one.</p>

<p>Then, I included this in the main program file:</p>

<pre><code>default_player_file = File.join(File.dirname(__FILE__), 'players.csv')
knuckleheads.load_players(ARGV.shift || default_player_file)
</code></pre>

<p>This loaded the players from the file given by the user or my default file if none is give and then runs the program as normal.</p>

<p>So, after two months of hard work and a steep learning curve I have completed my first gem! w00t! You can download it if you want:</p>

<p>$gem install blam_and_woot</p>

<p>If you want to peek at the source code you can find it<a href="https://github.com/jeffreybaird/blam_and_woot">here</a></p>

<p>I will be writing about packaging the gem and some issues I ran into with that later. For now, I am celebrating!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sunday's Challenge]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/05/06/sundays-challenge/"/>
    <updated>2012-05-06T00:00:00-04:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/05/06/sundays-challenge</id>
    <content type="html"><![CDATA[<p>Full of the knowledge gained from <a href="http://www.meetup.com/tampa-rb/events/60266012/" target="_blank">Coder Night</a> on Thursday, I made an attempt at creating a poker game. My original plan was to create three classes, a Player class, a Deck class and a Game class. The general construction of the game would be the Game class would use take a new deck object and pop the last card out of the shuffled array and assign it to one of the players in the array &#8220;hand&#8221;</p>

<p>The first problem I ran into was getting each player cards from the same deck. When I wrote the program the first time I assigned a new deck to each player.</p>

<p>I think I finally figured out the problem there, but I broke the program :/</p>

<p>I am pretty sure the problem is somewhere in my Game class. Any ideas?</p>

<pre><code>require_relative 'player'
class Game
  attr_reader :hand
  attr_accessor :make_game
  def initialize numplayers
    @numplayers = numplayers
    hand = []
  end
  def make_game
    i = 0
    while i &amp;lt; @numplayers
    hand &amp;lt;&amp;lt; Player.new()
    i+=1
    end
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yeah... I'm a bad blogger.]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/05/02/yeah-im-a-bad-blogger/"/>
    <updated>2012-05-02T00:00:00-04:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/05/02/yeah-im-a-bad-blogger</id>
    <content type="html"><![CDATA[<h2>I&#8217;m coming back now, I promise</h2>
I&#8217;m sorry, audience of zero, I haven&#8217;t been updating you on my learning process or helping you keep up. The problem is, I have been moving way too fast to write about it every day. So, to update you:
<h3>HTML:</h3>
While I am no master, I plowed through my HTML book and felt comfortable enough to move on.
<h3>CSS:</h3>
I know the concepts of CSS, I know what it can do and I know where to look up commands, I think I will get better by doing.

So the blog originally was for you to learn with me and I dropped the ball on keeping up with it. Sorry.

So, Where am I now?
<h3>JavaScript</h3>
I have been playing around with <a href="http://www.codecademy.com">codecademy</a> for a few months now and I love it. The exercises are challenging and you have a lot of freedom to mess around. It was a great intro to programming and I have since expanded my pursuits!
<h3>Ruby</h3>
Through the urging of my wonderful friends <a href="http://redheadjessica.com/">Jessica Barnett</a> and <a href="http://aubreygoodman.wordpress.com/">Aubrey Goodman</a>, I decided to pursue Ruby. I love it. Actually love is a gross understatement. When I sleep, I have dreams of objects and methods dancing in my head (you think I&#8217;m joking).

I am currently working my way through the <a href="http://pragprog.com/book/ltp2/learn-to-program">Learn to Program by Chris Pine</a> (highly recommend) and a course offered by <a href="http://pragmaticstudio.com/ruby">Pragmatic Studios</a> (equally awesome).

Needless to say, I don&#8217;t want to do anything else but program in Ruby for the foreseeable future.
<h3>General Computer Science</h3>
For this I am reading <a href="http://rcm.amazon.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=debautblo-20&amp;o=1&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=0071460519">Schaum&#8217;s Outline</a> which moves really fast but is completely worth the effort. I think this will prepare me well for some further exploration into algorithms and databases.
<h3>Java</h3>
I am also going through<a href="http://see.stanford.edu/see/courseinfo.aspx?coll=824a47e1-135f-4508-a5aa-866adcae1111"> Standford&#8217;s Intro to Programming Methodology and Computer Science </a>class to hopefully give me some training in larger theories and best practices of software design.

So, yes I am busy. I will however try to post more often with some tidbits, challenges and advice I pick up along the way. I hope you continue to read!
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML Meet Style]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/03/06/html-meet-style/"/>
    <updated>2012-03-06T00:00:00-05:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/03/06/html-meet-style</id>
    <content type="html"><![CDATA[Sorry for the unannounced absence. Life gets in the way.

Let&#8217;s look back at what we have learned so far:

First, we learned about how to secure a d<a title="For My First Lesson: My Digital Resume" href="http://www.learnwithjeff.com/2012/02/13/for-my-first-lesson-my-digital-resume/">omain name and set up hosting</a>.

Next, I introduced you to <a title="Lesson 2: An Intro to HTML" href="http://www.learnwithjeff.com/2012/02/14/lesson-2-an-intro-to-html/">HTML</a> and how it fits in the web.

After that, I showed you what a simple <a title="A Quick Look at HTML and Your First Assignment" href="http://www.learnwithjeff.com/2012/02/16/a-quick-look-at-html-and-your-first-assignment/">HTML document looks</a> like.

Finally, I showed you how to set up your <a title="Setting Up Your Website" href="http://www.learnwithjeff.com/2012/02/20/setting-up-your-website/">text editor</a> and your website&#8217;s folder.

Today we are going to learn some basic styling and introduce the &#8220;style&#8221; element to your HTML document. NEWS FLASH: It is no longer 1999 and we can&#8217;t use HTML to style our webpages&#8230;Gasp.

I know that is common knowledge to most people in web design, but don&#8217;t roll your eyes at me. It is a misconception many beginners carry.

I won&#8217;t be teaching any CSS today, just showing you where it fits in and what it does.

So let&#8217;s go back to the code from the earlier lesson:

<br><a href="http://www.learnwithjeff.com/wp-content/uploads/2012/03/Screen-Shot-2012-03-06-at-1.41.14-PM1.png"><img class="alignnone size-full wp-image-46" title="HTML" src="http://www.learnwithjeff.com/wp-content/uploads/2012/03/Screen-Shot-2012-03-06-at-1.41.14-PM1.png" alt="" width="475" height="519" /></a>

<br>That code gave us this web page:

<br><a href="http://www.learnwithjeff.com/wp-content/uploads/2012/03/Screen-Shot-2012-03-06-at-1.56.13-PM.png"><img class="alignnone size-medium wp-image-44" title="Unformatted Website" src="http://www.learnwithjeff.com/wp-content/uploads/2012/03/Screen-Shot-2012-03-06-at-1.56.13-PM-300x206.png" alt="" width="300" height="206" /></a>

<br>Now take a look at the same code with a little CSS thrown in:

<br><a href="http://www.learnwithjeff.com/wp-content/uploads/2012/03/Screen-Shot-2012-03-06-at-1.45.19-PM1.png"><img class="alignnone size-full wp-image-47" title="HTML with CSS" src="http://www.learnwithjeff.com/wp-content/uploads/2012/03/Screen-Shot-2012-03-06-at-1.45.19-PM1.png" alt="" width="520" height="660" /></a>

<br>Notice that I threw in a &#8220;Style&#8221; tag. The tag has an attribute, text/css. This tells the browser that we will be styling the website with CSS. I won&#8217;t tell you exactly what each one does, try to figure it out based on the picture below.

<br><a href="http://www.learnwithjeff.com/wp-content/uploads/2012/03/Screen-Shot-2012-03-06-at-1.56.02-PM.png"><img class="alignnone size-medium wp-image-43" title="Website Styled with CSS" src="http://www.learnwithjeff.com/wp-content/uploads/2012/03/Screen-Shot-2012-03-06-at-1.56.02-PM-300x210.png" alt="" width="300" height="210" /></a>

<br>So what did the CSS accomplish?
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Your Website]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/02/20/setting-up-your-website/"/>
    <updated>2012-02-20T00:00:00-05:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/02/20/setting-up-your-website</id>
    <content type="html"><![CDATA[<h2>Homework Answers:</h2>
&lt;html&gt; and &lt;/html&gt; let the browser know where the html document begins and ends

&lt;head&gt; and &lt;/head&gt; starts and ends the page &#8220;head&#8221;

&lt;title&gt; and &lt;/title&gt; Gives the page a title

&lt;body&gt; and &lt;/body&gt; starts and ends the &#8220;body&#8221; of the document.

&lt;h1&gt; and &lt;/h1&gt; changes the formatting of the enclosed text to the size of  heading 1

&lt;p&gt; and &lt;/p&gt; shows when a paragraph begins and ends

&lt;h2&gt; and &lt;/h2&gt; Same as heading 1 except slightly smaller.  There is a total of 6 heading sizes
<h2>Today&#8217;s Lesson</h2>
<h3>Setting up your website</h3>
In order to begin creating your website you have to first choose a text editor. If you have a Mac you can use TextEdit. If you have a PC, Notepad comes standard. Thanks to <a href="http://www.redheadjessica.com">Jessica</a> I will be using <a href="http://macromates.com/">TextMate</a> which is a text editor made specially for developers.

So open up the text editor of your choice and make sure that it is set to a plain text format (not necessary if using TextMate)

<a href="http://www.learnwithjeff.com/wp-content/uploads/2012/02/Screen-Shot-2012-02-20-at-4.30.39-PM.png"><img class="aligncenter size-medium wp-image-36" title="Make Plain Text" src="http://www.learnwithjeff.com/wp-content/uploads/2012/02/Screen-Shot-2012-02-20-at-4.30.39-PM-300x187.png" alt="" width="300" height="187" /></a>

<br>Save the file as &#8220;index.html&#8221; to a folder called &#8220;learnwithjeff.&#8221;

<br>Now, try creating a file like the one I did in my <a title="A Quick Look at HTML and Your First Assignment" href="http://www.learnwithjeff.com/2012/02/16/a-quick-look-at-html-and-your-first-assignment/">previous post</a>. Once you have finished open the file using your browser and check out your first HTML website!

&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Quick Look at HTML and Your First Assignment]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/02/16/a-quick-look-at-html-and-your-first-assignment/"/>
    <updated>2012-02-16T00:00:00-05:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/02/16/a-quick-look-at-html-and-your-first-assignment</id>
    <content type="html"><![CDATA[Hello!

Today we are going to look at a little basic HTML. I&#8217;m running behind so this will be a short post.

This is what a (super) basic HTML file looks like:

&nbsp;

<a href="http://www.learnwithjeff.com/wp-content/uploads/2012/02/Screen-Shot-2012-02-15-at-11.14.11-PM.png"><img class="aligncenter size-full wp-image-31" title="HTML as Text File" src="http://www.learnwithjeff.com/wp-content/uploads/2012/02/Screen-Shot-2012-02-15-at-11.14.11-PM.png" alt="" width="549" height="427" /></a>

This is what that file looks like on a web browser:

&nbsp;

<br><img class="aligncenter size-full wp-image-30" title="HTML in Browser" src="http://www.learnwithjeff.com/wp-content/uploads/2012/02/Screen-Shot-2012-02-15-at-11.08.57-PM.png" alt="" width="1280" height="447" />
<h2>Homework:</h2>
Your homework for tonight is to compare the two and make a guess as to what each tag does. Tomorrow we will go over it.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson 2: An Intro to HTML]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/02/14/lesson-2-an-intro-to-html/"/>
    <updated>2012-02-14T00:00:00-05:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/02/14/lesson-2-an-intro-to-html</id>
    <content type="html"><![CDATA[<h2>Disclaimer:</h2>
Third post in and I&#8217;ve already made an executive decision about this blog, it is about me. I know this may sound a bit selfish. I am okay with that.

I want you to read, follow along and learn with me. I will answer all questions as best I can. I won&#8217;t, however, choose what I teach based on popular demand. I want to learn, so I won&#8217;t cover things I already know.

So, on that note, we are not going to go over WordPress today like I had originally planned. We are going to go straight into HTML.

Now I know a little HTML but I figure it can&#8217;t hurt to get a little refresher so I will start from the beginning.
<h2>HTML:</h2>
I got my book in the mail, <a href="http://www.headfirstlabs.com/books/hfhtml/" target="_blank">Head First HTML with CSS &amp; XHTML</a>. It looks pretty basic and seems like a lot of fun (Lots of pictures). I will try to explain everything as best I can but I will always refer back to the book. If you want to follow along I would suggest purchasing it.

So let us first delve into the basics of HyperText Markup Language or HTML for short. To do that we need to first take a look at where it fits into the equation of the internet.

HTML is the language your browser understands. When you make a website you load HTML file(s) onto a web server. A web server is just a computer that stays on, connected to the internet.

When you visit a website you are sending a request to the server to send you that HTML file. Your browser than interprets all the HTML tags (certain words surrounded by &lt;…&gt;), and displays websites as you know them.

<a href="http://www.learnwithjeff.com/wp-content/uploads/2012/02/circleofweb.jpg"><img class="size-full wp-image-25" title="circleofweb" src="http://www.learnwithjeff.com/wp-content/uploads/2012/02/circleofweb.jpg" alt="" width="465" height="603" /></a>

&nbsp;

<br>So now we know where HTML fits into the web in general. It is a language that browsers use to determine the structure of a website. Next lesson, basic HTML tags.

See you next time :)
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For My First Lesson: My Digital Resume]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/02/13/for-my-first-lesson-my-digital-resume/"/>
    <updated>2012-02-13T00:00:00-05:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/02/13/for-my-first-lesson-my-digital-resume</id>
    <content type="html"><![CDATA[I&#8217;ve done a lot of cool things in my short 24 years. I&#8217;m proud of my accomplishments and I want to show them off to future employers, partners and investors. To do this, I am making an online resume.

First, I need a url. To do this you need to find an available <a href="http://en.wikipedia.org/wiki/Domain_name" target="_blank">domain name</a> and a <a href="http://en.wikipedia.org/wiki/Domain_name_registrar" target="_blank">domain registration company</a>.

<strong>Here are some of the tools I used</strong>:
<ul>
	<li><a href="http://domai.nr" target="_blank">Domai.nr</a> - This tool helps you find interesting domain names</li>
</ul>
<a href="http://domai.nr"><img class="alignnone size-medium wp-image-8" title="Domai.nr" src="http://www.learnwithjeff.com/wp-content/uploads/2012/02/Screen-Shot-2012-02-13-at-3.42.08-PM-300x121.png" alt="" width="300" height="121" /></a>

&nbsp;
<ul>
	<li><a href="http://www.fatcow.com" target="_blank">Fat Cow</a> - I love this website. It handles my domain registration as well as my hosting. It has one click Word Press installation, unlimited storage and a free domain name. It may not be the best in the market but I have been very happy with them.</li>
</ul>
<a href="http://www.fatcow.com"><img class="alignnone size-medium wp-image-10" title="Fat Cow" src="http://www.learnwithjeff.com/wp-content/uploads/2012/02/Screen-Shot-2012-02-13-at-3.48.14-PM-300x130.png" alt="" width="300" height="130" /></a>

&nbsp;

<br>Some other tools:
<ul>
	<li>Domain Registrars</li>
</ul>
<ol>
	<li><a href="http://http://www.namecheap.com/" target="_blank">Name Cheap</a> - Voted number one by lifehacker</li>
	<li><a href="http://order.1and1.com/;jsessionid=F02BDFEE56A859224F2FB59347CCB7AF.TCpfix240b?linkOrigin=Instant&amp;linkId=hd.log.eue" target="_blank">1&amp;1</a> - Came highly recommended</li>
	<li><a href="http://www.godaddy.com" target="_blank">Godaddy</a> - I have used in the past, generally more expensive and not user friendly</li>
</ol>
<ul>
	<li>Website Hosting</li>
</ul>
<ol>
	<li><a href="http://www.bluehost.com/" target="_blank">Blue Host</a> - Highly recommended by friends</li>
	<li><a href="http://www.hostmonster.com/" target="_blank">Host Monster</a> - Generally good online reviews</li>
	<li><a href="http://www.godaddy.com" target="_blank">Godaddy</a> - Popular but again, more expensive and not user friendly</li>
</ol>
<strong>What I did:</strong>
<ol>
	<li>Searched for domains using <a href="http://www.domai.nr" target="_blank">domia.nr</a>. I tried a few combinations and settled on <a href="http://www.hirejeffbaird.com" target="_blank">hirejeffbaird.com</a></li>
	<li>Opened a new account of <a href="http://www.fatcow.com" target="_blank">Fat Cow</a>, entered in my desired domain name and credit card information. I am now the proud owner of hirejeffbaird.com and have a hosting account to go along with it. Yay!</li>
</ol>
<strong>Tomorrow&#8217;s Lesson: Getting Started with Word Press</strong>

&nbsp;
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I am Jeff. Learn cool shit with me.]]></title>
    <link href="http://jeffreybaird.github.com/blog/2012/02/12/i-am-jeff/"/>
    <updated>2012-02-12T00:00:00-05:00</updated>
    <id>http://jeffreybaird.github.com/blog/2012/02/12/i-am-jeff</id>
    <content type="html"><![CDATA[Welcome to my new website, where we get to learn cool stuff together! I have spent a lifetime in school learning jack shit. Everything I&#8217;ve learned, for real, I taught myself or learned on the job.

That is what we are going to take a stab at on this site. I am going to pick a skill and then I&#8217;m going to teach myself said skill. I will then post how-to guides, instructional videos, detailed accounts of my mistakes, and (sometimes) funny anecdotes of the learning experience.

Sound fun? I hope so.

So a little about me:
<ul>
	<li>I am an undergraduate student in the entrepreneurship program at University of South Florida St. Petersburg.</li>
	<li>I worked on ships (no not cruise ships, the ones that bring all those products from China that you like)</li>
	<li>I&#8217;ve started three companies</li>
	<li>I just got engaged to the most wonderful woman in the world</li>
	<li>I read. A lot.</li>
	<li>I like to teach</li>
	<li>New is exciting</li>
	<li>I love learning</li>
</ul>
Okay, I won&#8217;t talk much more about myself from here on out, but I thought you should know the man behind the curtain.

As this website progresses I would love to field suggestions on topics to cover so jump in on the comments :)
]]></content>
  </entry>
  
</feed>
